#!/usr/bin/perl
##################################################################################################
#
# Multigraph munin plugin to monitor Ubiquiti AirOS devices various parameters. It needs
# Perl's Net::Telnet or Net::OpenSSH to be able to connect.
#
# To use this plugin, copy it to the munin's plugin directory (eg. /usr/share/munin/plugins) 
# under the name "ubiquiti_airos_". Don't change this filename! Follow these steps:
#
# 1. Give names to your devices, in fqdn style. Like "apo.wlan" or  "cli.wlan". To make the
#    system understand that, add them to your /etc/hosts file, like below:
#    192.168.2.2	apo.wlan
#    192.168.2.3	cli.wlan
#    You could of course add these to your network's local DNS server if you want to.
#
# 2. Then symlink it to munin's configured plugins directory (eg. /etc/munin/plugins) with names
#    according to the devices you wish to monitor, eg:
#    ubiquiti_airos_apo.wlan
#    ubiquiti_airos_cli.wlan
#
#    Important: make sure to use the same names in your symlinks and other config places!
#
# 3. In /etc/munin/plugin-conf.d/munin-node add the following, to be able to contact
#    those devices via telnet (obviously replacing these with your own data):
#
#    [ubiquiti_airos_apo.wlan]
#    user root			# User and Group are required only if using any of the SSH modes to store
#    group root			# the keys in /root/.ssh directory (or any user with homedir and shell)
#    env.NetMode Telnet         # Connection mode, can be 'Telnet' or 'SSHPass' or 'SSHKey'
#    env.Port 23                # Port of the Telnet or SSH service configured in AirOS web interface
#    env.User foobar		# Username to log in
#    env.Pass raboof		# Password to log in
#    env.PingAddr 192.168.2.3	# An IP address to ping, typically the other wireless device or a gateway
#    env.PingName cli.wlan	# Friendly name of the pinged device, to display on the ping graph
#
#    [ubiquiti_airos_cli.wlan]
#    user root
#    group root
#    env.NetMode SSHPass
#    env.Port 22
#    env.User foobar
#    env.Pass raboof
#    env.PingAddr 192.168.2.2
#    env.PingName apo.wlan
#
# 4. In /etc/munin/munin.conf add them as new virtual nodes:
#
#    [apo.wlan]
#        address 127.0.0.1
#
#    [cli.wlan]
#        address 127.0.0.1
#
# 5. Restart the munin node by 'service munin-node restart'.
#
#    If all went well, after 5 minutes or so you should have two additional nodes listed 
#    on the Web Interface of munin.
#
# To use the script with public keys authentication and no password, set env.NetMode SSHkey, and 
# create a pair of keys using command 'sudo ssh-keygen -t rsa'. This will generate in /root/.ssh 
# directory two files, id_rsa and id_rsa.pub. Upload id_rsa.pub to your Ubiquiti device using 
# Services > SSH Server > Authorized Keys window. Try to log in to the device by command line
# first ('sudo ssh foobar@cli.wlan'), to save the RSA key fingerprint in the root account.
#
# Plugin based on aramsey's script, which is based on a MicroTik plugin, see for more info see this link:
# http://community.ubnt.com/t5/NanoStation-and-Loco-Devices/SNMP-data-for-NF-dBm/m-p/39070/highlight/true#M11372

#
# Tested & working with munin v.2.0.14 and AirOS v5.5.6.
# Created in 2013 by robi
#  v0.9 - added SSH support and saved some memory, thanks to NVX@UbiquitiNetworksCommunity
#  v0.8 - cleared up stuff related to naming and added ping graphs from munin-node
#  v0.7 - added critical thresholds to some graphs, and some descriptions below some of them
#  v0.6 - added wlan errors by type graph - useful to detect interferences on the same frequency; added CPU usage graph
#  v0.5 - added ping graph - ping times from the AirOS device to a configured address; other fixes
#  v0.4 - corrected memory size unit calculation and display, fixed query bug, fancier graphs for memory and link speed
#  v0.3 - added undefined values handling in case of connection timeout, corrected linefeed character handling
#  v0.2 - combined all the separate pugins into one multigraph plugin, a couple of charts separated
#  v0.1 - initial version, separate plugin for each graph, packaged 11 different plugins
##############################################################################
## Magic Markers
 #%# family=manual
##############################################################################
use diagnostics;
use strict;
use warnings;
##############################################################################
## Receive environmentals and load required modules
my $NetMode = $ENV{'NetMode'};
if ($NetMode =~ /Telnet/) {
  use Net::Telnet;
} 
elsif ($NetMode =~ /SSH/) {
  use Net::OpenSSH;
}
my $Port = $ENV{'Port'};
my $User = $ENV{'User'};
my $Pass = $ENV{'Pass'};
my $PingAddr = $ENV{'PingAddr'};
my $PingName = $ENV{'PingName'};
my $HostLo = qx("hostname");
chomp ($HostLo);
##############################################################################
## Define variables
my $graph_period = "second";
my ($load, $uptime, $ping_time, $packet_loss, $amc, $amq, $conn, $mt, $mf, $mb, $errlrcvd, $errltrans, $errwrcvd, $errwtrans, $ping_timelo, $packet_losslo); 
my ($trflup, $trfldown, $trfwup, $trfwdown, $freq, $txccq, $acttimeout, $txsignal, $noisefloor, $txrate, $rxrate, $errnwid);
my ($errcrypt, $errfrag, $errretries, $errbmiss, $errother, $cpuuser, $cpusystem, $cpunice, $cpuidle, $cpuiowait, $cpuirq, $cpusoftirq);
$load = $uptime = $ping_time = $packet_loss = $amc = $amq = $conn = $mt = $mf = $mb = $errlrcvd = $errltrans = $errwrcvd = $errwtrans = $ping_timelo = $packet_losslo = "U";
$trflup = $trfldown = $trfwup = $trfwdown = $freq = $txccq= $acttimeout = $txsignal = $noisefloor = $txrate = $rxrate = $errnwid = "U";
$errcrypt = $errfrag = $errretries = $errbmiss = $errother = $cpuuser = $cpusystem = $cpunice = $cpuidle = $cpuiowait = $cpuirq = $cpusoftirq = "U";
###############################################################################
## Determine Hostname and other stuff
my $Hostname = undef;
$0 =~ /ubiquiti_airos_(.+)*$/;
unless ($Hostname = $1) {
  exit 2;
}
if ($PingAddr // "") {
  if (!($PingName // "")) {
    $PingName = $PingAddr;
  }
}
###############################################################################
## Configuration
if(exists $ARGV[0] and $ARGV[0] eq "config") {
  print "multigraph airos_load\n";
  print "host_name " . $Hostname . "\n";
  print "graph_args --base 1000 -l 0 \n";
  print "graph_title Load average\n";
  print "graph_vlabel load\n";
  print "graph_category system\n";
  print "graph_scale no\n";
  print "load.label load\n";
  print "load.critical 10\n";
  print "graph_info The load average of " . $Hostname . " describes how many processes are in the run-queue (scheduled to run 'immediately').\n";
  print "load.info 5 minute load average\n";
  print "\n";

  print "multigraph airos_uptime\n";
  print "host_name " . $Hostname . "\n";
  print "graph_args --base 1000 -l 0 \n";
  print "graph_title Uptime\n";
  print "graph_vlabel uptime in days\n";
  print "graph_category system\n";
  print "graph_scale no\n";
  print "uptime.label uptime\n";
  print "uptime.draw AREA\n";
  print "graph_info This graph shows how many days have passed since the bootup of " . $Hostname . ".\n";
  print "\n";

  print "multigraph airos_airmax\n";
  print "host_name " . $Hostname . "\n";
  print "graph_args --base 1000 -l 0 --lower-limit 0 --upper-limit 100\n";
  print "graph_title AirMAX Quality and Capacity\n";
  print "graph_vlabel %\n";
  print "graph_category radio\n";
  print "graph_info This graph shows the AirMAX Quality and AirMAX Capacity of " . $Hostname . ". AirMAX Quality (AMQ) is based on the number of retries and the quality of the physical link. If this value is low, you may have interference and need to change frequencies. If AMQ is above 80% and you do not notice any other issues, then you do not need to make any changes. AirMAX Capacity (AMC) is based on airtime efficiency. The lower the AMC, the less efficient the AP is. If you only have one client, this may not matter, but when you have many clients (for example, more than 30), then AMC becomes very important, and you want it to be as high as possible.\n";
  print "graph_scale no\n";
  print "amc.label AirMAX Capacity\n";
  print "amc.critical 25:\n";
  print "amq.label AirMAX Quality\n";
  print "amq.critical 55:\n";
  print "\n";

  print "multigraph airos_wconn\n";
  print "host_name " . $Hostname . "\n";
  print "graph_title WLAN connections\n";
  print "graph_args --base 1000 -l 0\n";
  print "graph_category network\n";
  print "graph_info This graph shows the number of wireless connections to the wlan interface of " . $Hostname . ".\n";
  print "conn.label Connections\n";
  print "conn.critical 1:\n";
  print "\n";

  print "multigraph airos_errl\n";
  print "graph_order errlrcvd errltrans\n";
  print "graph_args --base 1000\n";
  print "graph_period " . $graph_period . "\n";
  print "graph_vlabel packets in (-) / out (+) per " . $graph_period . "\n";
  print "graph_info This graph shows the amount of errors on the LAN network interface of " . $Hostname . ".\n";
  print "errlrcvd.label errors\n";
  print "errlrcvd.type COUNTER\n";
  print "errlrcvd.graph no\n";
  print "errlrcvd.critical 1\n";
  print "errltrans.label errors\n";
  print "errltrans.type COUNTER\n";
  print "errltrans.negative errlrcvd\n";
  print "errltrans.critical 1\n";
  print "host_name " . $Hostname . "\n";
  print "graph_title LAN errors\n";
  print "graph_category network\n";
  print "\n";

  print "multigraph airos_errw\n";
  print "graph_order errwrcvd errwtrans\n";
  print "graph_args --base 1000\n";
  print "graph_period " . $graph_period . "\n";
  print "graph_vlabel packets in (-) / out (+) per " . $graph_period . "\n";
  print "graph_info This graph shows the amount of errors on the WLAN network interface of " . $Hostname . ".\n";
  print "errwrcvd.label errors\n";
  print "errwrcvd.type COUNTER\n";
  print "errwrcvd.graph no\n";
  print "errwrcvd.critical 1\n";
  print "errwtrans.label errors\n";
  print "errwtrans.type COUNTER\n";
  print "errwtrans.negative errwrcvd\n";
  print "errwtrans.critical 1\n";
  print "host_name " . $Hostname . "\n";
  print "graph_title WLAN errors\n";
  print "graph_category network\n";
  print "\n";

  print "multigraph airos_trfl\n";
  print "graph_order trfldown trflup\n";
  print "graph_args --base 1000\n";
  print "graph_period " . $graph_period . "\n";
  print "graph_vlabel bits in (-) / out (+) per " . $graph_period . "\n";
  print "graph_info This graph shows the traffic of the LAN network interface of " . $Hostname . ".\n";
  print "trfldown.label received\n";
  print "trfldown.type DERIVE\n";
  print "trfldown.graph no\n";
  print "trfldown.cdef trfldown,8,*\n";
  print "trfldown.min 0\n";
  print "trflup.label bps\n";
  print "trflup.type DERIVE\n";
  print "trflup.negative trfldown\n";
  print "trflup.cdef trflup,8,*\n";
  print "trflup.min 0\n";
  print "host_name " . $Hostname . "\n";
  print "graph_title LAN traffic\n";
  print "graph_category network\n";
  print "\n";

  print "multigraph airos_trfw\n";
  print "graph_order down up\n";
  print "graph_args --base 1000\n";
  print "graph_period " . $graph_period . "\n";
  print "graph_vlabel bits in (-) / out (+) per " . $graph_period . "\n";
  print "graph_info This graph shows the traffic of the WLAN network interface of " . $Hostname . ".\n";
  print "trfwdown.label received\n";
  print "trfwdown.type DERIVE\n";
  print "trfwdown.graph no\n";
  print "trfwdown.cdef trfwdown,8,*\n";
  print "trfwdown.min 0\n";
  print "trfwup.label bps\n";
  print "trfwup.type DERIVE\n";
  print "trfwup.negative trfwdown\n";
  print "trfwup.cdef trfwup,8,*\n";
  print "trfwup.min 0\n";
  print "host_name " . $Hostname . "\n";
  print "graph_title WLAN traffic\n";
  print "graph_category network\n";
  print "\n";

  print "multigraph airos_freq\n";
  print "host_name " . $Hostname . "\n";
  print "graph_args --base 1000 --units-exponent 0 --lower-limit 5100 --upper-limit 5800\n";
  print "graph_title Frequency\n";
  print "graph_vlabel MHz\n";
  print "graph_category radio\n";
  print "graph_info This graph shows the operating frequency of the wireless interface of " . $Hostname . ".\n";
  print "graph_scale no\n";
  print "freq.label MHz\n";
  print "\n";

  print "multigraph airos_mem\n";
  print "host_name " . $Hostname . "\n";
  print "graph_args --base 1000 -l 0 \n";
  print "graph_title Memory usage\n";
  print "graph_vlabel MB\n";
  print "graph_category system\n";
  print "graph_info This graph shows the device memory usage status of " . $Hostname . ".\n";
  print "graph_order memTotal memFree memBuffers\n";
  print "memFree.label Free\n";
  print "memFree.cdef memFree,1024,*\n";
  print "memFree.draw AREA\n";
  print "memBuffers.label Buffers\n";
  print "memBuffers.cdef memBuffers,1024,*\n";
  print "memBuffers.draw AREA\n";
  print "memTotal.label Total\n";
  print "memTotal.cdef memTotal,1024,*\n";
  print "memTotal.draw AREA\n";
  print "\n";

  print "multigraph airos_ccq\n";
  print "host_name " . $Hostname . "\n";
  print "graph_args  --base 1000 -l 0 --upper-limit 101\n";
  print "graph_title Client Connection Quality\n";
  print "graph_vlabel %\n";
  print "graph_category radio\n";
  print "graph_info This graph shows the Client Connection Quality value of " . $Hostname . ". The level is based on a percentage value for which 100% corresponds to a perfect link state.\n";
  print "graph_scale no\n";
  print "txccq.label Transmit CCQ\n";
  print "txccq.critical 60:\n";
  print "\n";

  print "multigraph airos_ack\n";
  print "host_name " . $Hostname . "\n";
  print "graph_args --base 1000\n";
  print "graph_title ACK timeout\n";
  print "graph_vlabel us\n";
  print "graph_category radio\n";
  print "graph_info This graph shows the ACK (Acknowledgement) timeout value of " . $Hostname . ".\n";
  print "acttimeout.label ACK Timeout\n";
  print "\n";

  print "multigraph airos_dbm\n";
  print "host_name " . $Hostname . "\n";
  print "graph_args --base 1000\n";
  print "graph_title Signal levels\n";
  print "graph_vlabel dBm\n";
  print "graph_category radio\n";
  print "graph_info This graph shows the radio signal levels of " . $Hostname . ".\n";
  print "txsignal.label Signal Strength\n";
  print "noisefloor.label Noise Floor\n";
  print "\n";

  print "multigraph airos_wrate\n";
  print "host_name " . $Hostname . "\n";
  print "graph_category radio\n";
  print "graph_title Wireless link speed\n";
  print "graph_order rxrate txrate\n";
  print "graph_period " . $graph_period . "\n";
  print "graph_vlabel RX (-) / TX (+) Mbps\n";
  print "graph_info This graph shows the wireless link connection speed of " . $Hostname . ".\n";
  print "rxrate.label RX/TX Rate\n";
  print "rxrate.graph no\n";
  print "txrate.label Mbps\n";
  print "txrate.draw AREA\n";
  print "txrate.negative rxrate\n";
  print "\n";

  print "multigraph airos_errwty\n";
  print "host_name " . $Hostname . "\n";
  print "graph_title WLAN errors by type\n";
  print "graph_args -l 0 --units-exponent 0\n";
  print "graph_category network\n";
  print "graph_info This graph shows the amount of errors on the received side of the WLAN network interface of " . $Hostname . ", differentiated by type.\n";
  print "graph_scale no\n";
  print "errnwid.label Nwid\n";
  print "errnwid.info Received WLAN frames that do not belong to the own set BSSID (caused by interference on the same frequency).\n";
  print "errnwid.critical 0:0\n";
  print "errcrypt.label Crypt\n";
  print "errcrypt.critical 0:0\n";
  print "errfrag.label Frag\n";
  print "errfrag.critical 0:0\n";
  print "errretries.label Retries\n";
  print "errretries.critical 0:0\n";
  print "errbmiss.label Bmiss\n";
  print "errbmiss.critical 0:0\n";
  print "errother.label Other\n";
  print "errother.critical 0:0\n";
  print "\n";

  print "multigraph airos_cpu\n";
  print "host_name " . $Hostname . "\n";
  print "graph_args -l 0 --lower-limit 0 --upper-limit 100\n";
  print "graph_title CPU usage\n";
  print "graph_vlabel %\n";
  print "graph_category system\n";
  print "graph_info This graph shows how CPU time is spent in " . $Hostname . ".\n";
  print "graph_scale no\n";
  print "graph_period second\n";
  print "graph_order system user nice iowait irq softirq idle\n";
  print "system.label cpu-system\n";
  print "system.draw AREA\n";
  print "system.min 0\n";
  print "system.info CPU time spent by the kernel in system activities in " . $Hostname . ".\n";
  print "user.label cpu-user\n";
  print "user.draw STACK\n";
  print "user.min 0\n";
  print "user.info CPU time spent by normal programs and daemons in " . $Hostname . ".\n";
  print "nice.label cpu-nice\n";
  print "nice.draw STACK\n";
  print "nice.min 0\n";
  print "nice.info CPU time spent by nice(1)d programs in " . $Hostname . ".\n";
  print "idle.label cpu-idle\n";
  print "idle.draw STACK\n";
  print "idle.min 0\n";
  print "idle.info Idle CPU time in " . $Hostname . ".\n";
  print "iowait.label cpu-iowait\n";
  print "iowait.draw STACK\n";
  print "iowait.min 0\n";
  print "iowait.info CPU time spent waiting for I/O operations to finish when there is nothing else to do in " . $Hostname . ".\n";
  print "irq.label cpu-irq\n";
  print "irq.draw STACK\n";
  print "irq.min 0\n";
  print "irq.info CPU time spent handling interrupts in " . $Hostname . ".\n";
  print "softirq.label cpu-softirq\n";
  print "softirq.draw STACK\n";
  print "softirq.min 0\n";
  print "softirq.info CPU time spent handling batched interrupts in " . $Hostname . ".\n";
  print "\n";

  if ($PingAddr // "") {
    print "multigraph airos_ping1\n";
    print "host_name " . $Hostname . "\n";
    print "graph_title Ping times from " . $Hostname . " to " . $PingName . "\n";
    print "graph_args --base 1000 -l 0\n";
    print "graph_vlabel roundtrip time (seconds)\n";
    print "graph_category network\n";
    print "graph_info This graph shows ping RTT statistics, measured on " . $Hostname . " against " . $PingName . ". If you configure here the other end of the wireless link this graph will show you the pure latency of the wireless segment, without any etra latencies introduced by other network elements or segments.\n";
    print "ping.label " . $PingName . "\n";
    print "ping.info Ping RTT statistics for " . $PingName . " (" . $PingAddr . ").\n";
    print "packetloss.label packet loss\n";
    print "packetloss.graph no\n";
    print "\n";
  }

  print "multigraph airos_pinglo_ping\n";
  print "host_name " . $Hostname . "\n";
  print "graph_title Ping times to " . $Hostname . "\n";
  print "graph_args --base 1000 -l 0\n";
  print "graph_vlabel roundtrip time (seconds)\n";
  print "graph_category network\n";
  print "graph_info This graph shows ping RTT statistics, measured on the munin-node " . $HostLo . " against " . $Hostname . ".\n";
  print "ping.label " . $Hostname . "\n";
  print "ping.info Ping RTT statistics for " . $Hostname . ".\n";
  print "\n";

  print "multigraph airos_pinglo_loss\n";
  print "host_name " . $Hostname . "\n";
  print "graph_title Ping packet loss to " . $Hostname . "\n";
  print "graph_args --base 1000 -l 0\n";
  print "graph_vlabel %\n";
  print "graph_category network\n";
  print "graph_info This graph shows ping packet loss, measured on the munin-node " . $HostLo . " against " . $Hostname . ". If this is anything above 0, there may be problems with the network connection, or the devices are unreachable.\n";
  print "packetloss.label " . $Hostname . "\n";
  print "packetloss.info Packet loss for " . $Hostname . ".\n";
  print "packetloss.critical 0:0\n";
  print "\n";


  exit;
}

###############################################################################
my $CM;
my $SSH;

if ($NetMode =~ /Telnet/) {
  ## Initiate Telnet Session
  $CM = Net::Telnet->new(Port  => $Port,
                         Prompt=> '/ $/',
                         Timeout=>10,
                         Errmode=>'return');
  $CM->open($Hostname);

  if (!defined($CM->login($User, $Pass))) {
    &printResults(); # Nothing happens, except printing undefined results to munin
  }
}

elsif ($NetMode =~ /SSHPass/) {
  ## Initiate SSH Session using password authentication
  $SSH = Net::OpenSSH->new($Hostname, 
                           port => $Port,
                           user => $User, 
                           password => $Pass,
                           timeout => 10,
#                           master_stderr_discard => 1,
                           master_opts => [-o => "StrictHostKeyChecking=no"]);
  $SSH->error and 
  #  warn "Couldn't establish SSH connection: " . $SSH->error;
    &printResults(); # Nothing happens, except printing undefined results to munin
}

elsif ($NetMode =~ /SSHKey/) {
  ## Initiate SSH Session using public key authentication  
  $SSH = Net::OpenSSH->new($Hostname,
                           port => $Port,
                           user => $User,
                           timeout => 10,
#                           master_stderr_discard => 1,
                           master_opts => [-o => "StrictHostKeyChecking=no"]);
  $SSH->error and
  #  warn "Couldn't establish SSH connection: " . $SSH->error;
    &printResults(); # Nothing happens, except printing undefined results to munin
}




###############################################################################
## Execution
my @Out;

if ($NetMode =~ /Telnet/) {
  @Out = $CM->cmd("cat /proc/loadavg");
}
elsif ($NetMode =~ /SSH/) {
  @Out = $SSH->capture("cat /proc/loadavg");
}
foreach my $Line (@Out) {
  if ($Line !~ /XM.v/ && $Line =~ m/(\d+)/) {
    	$load = substr($Line, 0,4);
  }
}


my $topcmd = "top -b -n2 -d1 | grep '^CPU:' | tail -n1";
if ($NetMode =~ /Telnet/) {
  @Out = $CM->cmd($topcmd);
}
elsif ($NetMode =~ /SSH/) {
  @Out = $SSH->capture($topcmd);
}
chomp @Out;
my $OutCPU = join(" ", @Out);
my $recpu=".*?(\\d+).*?(\\d+).*?(\\d+).*?(\\d+).*?(\\d+).*?(\\d+).*?(\\d+)";
if ($OutCPU =~ m/$recpu/is) {
  $cpuuser=$1;
  $cpusystem=$2;
  $cpunice=$3;
  $cpuiowait=$5;
  $cpuirq=$6;
  $cpusoftirq=$7;
  $cpuidle=100 - $cpuuser - $cpusystem - $cpunice - $cpuiowait - $cpuirq - $cpusoftirq; #=$4
}

sleep 1;

if ($NetMode =~ /Telnet/) {
  @Out = $CM->cmd("cat /proc/uptime");
}
elsif ($NetMode =~ /SSH/) {
  @Out = $SSH->capture("cat /proc/uptime");
}

foreach my $Line (@Out) {
  if ($Line !~ /XM.v/ && $Line =~ m/(\d+)/) {
	$uptime = $1 / 86400;
  }
}


if ($NetMode =~ /Telnet/) {
  @Out = $CM->cmd("ubntbox mca-status");
}
elsif ($NetMode =~ /SSH/) {
  @Out = $SSH->capture("ubntbox mca-status");
}

foreach my $Line (@Out) {
    if ($Line =~ /wlanRxErrors/ && $Line =~ m/(.\d+)/) {
        $errwrcvd = substr($Line, 13);
    }
    if ($Line =~ /wlanTxErrors/ && $Line =~ m/(.\d+)/) {
        $errwtrans = substr($Line, 13);
    }
    if ($Line =~ /lanRxErrors/ && $Line !~ /wlan/ && $Line =~ m/(.\d+)/) {
        $errlrcvd = substr($Line, 12);
    }
    if ($Line =~ /lanTxErrors/ && $Line !~ /wlan/ && $Line =~ m/(.\d+)/) {
        $errltrans = substr($Line, 12);
    }
    if ($Line =~ /wlanPollingCapacity/ && $Line =~ m/(.\d+)/) {
        $amc = substr($Line, 20);
	if ($amc == 0) {
	    $amc = "U";
	}
    }
    if ($Line =~ /wlanPollingQuality/ && $Line =~ m/(.\d+)/) {
        $amq = substr($Line, 19);
        if ($amq == 0) {
            $amq = "U";
        }
    }
    if ($Line =~ /wlanConnections/ && $Line =~ m/(.\d+)/) {
        $conn = substr($Line, 16);
    }
    if ($Line =~ /lanRxBytes/ && $Line !~ /wlan/ && $Line =~ m/(.\d+)/) {
        $trfldown = substr($Line, 11);
    }
    if ($Line =~ /lanTxBytes/ && $Line !~ /wlan/ && $Line =~ m/(.\d+)/) {
        $trflup = substr($Line, 11);
    }
    if ($Line =~ /wlanRxBytes/ && $Line =~ m/(.\d+)/) {
        $trfwdown = substr($Line, 12);
    }
    if ($Line =~ /wlanTxBytes/ && $Line =~ m/(.\d+)/) {
        $trfwup = substr($Line, 12);
    }
    if ($Line =~ /freq/ && $Line =~ m/(.\d+)/) {
        $freq = substr($Line, 5);
    }
    if ($Line =~ /memTotal/ && $Line =~ m/(\d+)/) {
        $mt = $1;
    }
    if ($Line =~ /memFree/ && $Line =~ m/(\d+)/) {
        $mf = $1;
    }
    if ($Line =~ /memBuffers/ && $Line =~ m/(\d+)/) {
        $mb = $1;
    }
    if (($Line =~ /ccq/ && $Line !~ /overall-tx-ccq/) && $Line =~ m/(\d+)/) {
        $txccq = $1 / 10;
        if ($txccq == 0) {
            $txccq = "U";
        }
    }
    if ($Line =~ /signal/ && $Line =~ m/(.\d+)/) {
      $txsignal = $1;
    }
    if ($Line =~ /noise/ && $Line =~ m/(.\d+)/) {
      $noisefloor = $1;
    }
    if ($Line =~ /ackTimeout/ && $Line =~ m/(\d+)/) {
      $acttimeout = $1;
    }
    if ($Line =~ /wlanTxRate/ && $Line =~ m/(\d+)/) {
      $txrate = $1;
    }
    if ($Line =~ /wlanRxRate/ && $Line =~ m/(\d+)/) {
      $rxrate = $1;
    }
    if ($Line =~ /wlanRxErrNwid/ && $Line =~ m/(.\d+)/) {
        $errnwid = substr($Line, 14);
    }
    if ($Line =~ /wlanRxErrCrypt/ && $Line =~ m/(.\d+)/) {
        $errcrypt = substr($Line, 15);
    }
    if ($Line =~ /wlanRxErrFrag/ && $Line =~ m/(.\d+)/) {
        $errfrag = substr($Line, 14);
    }
    if ($Line =~ /wlanRxErrRetries/ && $Line =~ m/(.\d+)/) {
        $errretries = substr($Line, 17);
    }
    if ($Line =~ /wlanRxErrBmiss/ && $Line =~ m/(.\d+)/) {
        $errbmiss = substr($Line, 15);
    }
    if ($Line =~ /wlanRxErrOther/ && $Line =~ m/(.\d+)/) {
        $errother = substr($Line, 15);
    }


}
sleep 1;
if ($PingAddr // "") {
  my $pingcmd = "ping -c 2 " . $PingAddr . " 2>/dev/null";
  if ($NetMode =~ /Telnet/) {
    @Out = $CM->cmd($pingcmd);
  }
  elsif ($NetMode =~ /SSH/) {
    @Out = $SSH->capture($pingcmd);
  }
    chomp @Out;
    my $ping = join(" ", @Out);
    $ping_time = ($1 / 1000) if ($ping =~ m@min/avg/max.*\s\d+(?:\.\d+)?/(\d+(?:\.\d+)?)/\d+(?:\.\d+)?@);
    $packet_loss = $1 if ($ping =~ /(\d+)% packet loss/);
  } else {
    $PingName = "";
    $PingAddr = "";
}


if ($NetMode =~ /Telnet/) {
  $CM->close;
}

my $pingcmdlo = "ping -c 2 " . $Hostname . " 2>/dev/null";
my @pinglo = qx($pingcmdlo);
chomp @pinglo;
my $pinglo = join(" ", @pinglo);
$ping_timelo = ($1 / 1000) if ($pinglo =~ m@min/avg/max.*\s\d+(?:\.\d+)?/(\d+(?:\.\d+)?)/\d+(?:\.\d+)?@);
$packet_losslo = $1 if ($pinglo =~ /(\d+)% packet loss/);

chomp($load, $uptime, $ping_time, $packet_loss, $amc, $amq, $conn, $mt, $mf, $mb, $errlrcvd, $errltrans, $ping_timelo, $packet_losslo, 
	$errwrcvd, $errwtrans, $trflup, $trfldown, $trfwup, $trfwdown, $freq, $txccq, $acttimeout, $txsignal, 
	$noisefloor, $txrate, $rxrate, $errnwid, $errcrypt, $errfrag, $errretries, $errbmiss, $errother,
	$cpuuser, $cpusystem, $cpunice, $cpuidle, $cpuiowait, $cpuirq, $cpusoftirq);

&printResults();

sub printResults {
  print "\n";

  print "multigraph airos_wrate\n";
  print "txrate.value " . $txrate . "\n";
  print "rxrate.value " . $rxrate . "\n";
  print "\n";

  print "multigraph airos_ccq\n";
  print "txccq.value " . $txccq . "\n";
  print "\n";

  print "multigraph airos_ack\n";
  print "acttimeout.value " . $acttimeout . "\n";
  print "\n";
  
  print "multigraph airos_dbm\n";
  print "txsignal.value " . $txsignal . "\n";
  print "noisefloor.value " . $noisefloor . "\n";
  print "\n";

  print "multigraph airos_mem\n";
  print "memTotal.value " . $mt . "\n";
  print "memFree.value " . $mf . "\n";
  print "memBuffers.value " . $mb . "\n";
  print "\n";

  print "multigraph airos_freq\n";
  print "freq.value " . $freq . "\n";
  print "\n";

  print "multigraph airos_trfw\n";
  print "trfwup.value " . $trfwup . "\n";
  print "trfwdown.value " . $trfwdown . "\n";
  print "\n";

  print "multigraph airos_trfl\n";
  print "trflup.value " . $trflup . "\n";
  print "trfldown.value " . $trfldown . "\n";
  print "\n";

  print "multigraph airos_errw\n";
  print "errwrcvd.value " . $errwrcvd . "\n";
  print "errwtrans.value " . $errwtrans . "\n";
  print "\n";

  print "multigraph airos_errl\n";
  print "errlrcvd.value " . $errlrcvd . "\n";
  print "errltrans.value " . $errltrans . "\n";
  print "\n";

  print "multigraph airos_airmax\n";
  print "amc.value " . $amc . "\n";
  print "amq.value " . $amq . "\n";
  print "\n";

  print "multigraph airos_wconn\n";
  print "conn.value " . $conn . "\n";
  print "\n";

  print "multigraph airos_load\n";
  print "load.value " . $load . "\n";
  print "\n";

  print "multigraph airos_uptime\n";
  print "uptime.value " . $uptime . "\n";
  print "\n";

  print "multigraph airos_errwty\n";
  print "errnwid.value $errnwid\n";
  print "errcrypt.value $errcrypt\n";
  print "errfrag.value $errfrag\n";
  print "errretries.value $errretries\n";
  print "errbmiss.value $errbmiss\n";
  print "errother.value $errother\n";
  print "\n";

  print "multigraph airos_cpu\n";
  print "user.value $cpuuser\n";
  print "system.value $cpusystem\n";
  print "nice.value $cpunice\n";
  print "idle.value $cpuidle\n";
  print "iowait.value $cpuiowait\n";
  print "irq.value $cpuirq\n";
  print "softirq.value $cpusoftirq\n";
  print "\n";

  if ($PingAddr // "") {
    print "multigraph airos_ping1\n";
    print "ping.value " . $ping_time . "\n";
    print "packetloss.value " . $packet_loss . "\n";
    print "\n";
  }

  print "multigraph airos_pinglo_ping\n";
  print "ping.value " . $ping_timelo . "\n";
  print "\n";

  print "multigraph airos_pinglo_loss\n";
  print "packetloss.value " . $packet_losslo . "\n";
  print "\n";

  exit;
}

