#!/usr/bin/perl

 use strict;
 use warnings;
 use Munin::Plugin::SNMP;
 use vars qw($DEBUG);
 use Data::Dumper;


$DEBUG = $ENV{'MUNIN_DEBUG'};

my %oids = (
    cifsBadCalls    =>    'BadCalls',
    cifsGetAttrs    =>    'GetAttrs',
    cifsReads       =>    'Reads',
    cifsWrites      =>    'Writes',
    cifsLocks       =>    'Locks',
    cifsOpens       =>    'Opens',
    cifsDirOps      =>    'DirOps',
    cifsOthers      =>    'Others',
    cifsSetAttrs    =>    'SetAttr',
);

if (defined $ARGV[0] and $ARGV[0] eq 'snmpconf') {
    print "require 1.3.6.1.4.1.789.1.7.3.1.1. [0-9]\n";
    exit 0;
}

my $session = Munin::Plugin::SNMP->session();

if (defined $ARGV[0] and $ARGV[0] eq "config") {

    my ($host, undef, undef, undef) = Munin::Plugin::SNMP->config_session();

    print "host_name $host\n" unless $host eq 'localhost';
    print "graph_title $host CIFS calls\n";
    print "graph_args --base 1000 --lower-limit 0 --rigid\n";
    print "graph_vlabel calls / \${graph_period}\n";
    print "graph_category cifs\n";
    print "graph_info This graph shows cifs calls for the $host NetApp equipment.\n";
    print "graph_order ";

    foreach (sort keys %oids) { print "$_ "; }
    print "\n";

    foreach my $k (sort keys %oids) {
        print "$k.info The number of cifs calls received for the $oids{$k} procedure, since the last time the statistics were cleared.\n";
        print "$k.type COUNTER\n";
        print "$k.label $oids{$k}\n";
        print "$k.min 0\n";
    }

    exit 0;
}

my $values = $session->get_hash(
    -baseoid => '1.3.6.1.4.1.789.1.7.3.1.1',
    -cols    => {
            1    =>    'cifsTotalOps',
            2    =>    'cifsTotalCalls',
            3    =>    'cifsBadCalls',
            4    =>    'cifsGetAttrs',
            5    =>    'cifsReads',
            6    =>    'cifsWrites',
            7    =>    'cifsLocks',
            8    =>    'cifsOpens',
            9    =>    'cifsDirOps',
           10    =>    'cifsOthers',
           11    =>    'cifsSetAttrs',
           },
);

foreach my $k (keys %oids) {
    my $v = 'U';
    $v = $values->{0}->{$k} if (defined $values);
    print "$k.value $v\n";
}

exit 0;

__END__
