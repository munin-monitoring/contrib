#!/usr/bin/perl -w
# -*- cperl -*-

use strict;
use Munin::Plugin;
use Munin::Plugin::SNMP;
use Switch;
need_multigraph();

my $DEBUG = $ENV{'MUNIN_DEBUG'};

my $response;
my $volace;


if (defined $ARGV[0] and $ARGV[0] eq "snmpconf") {
	print "require  1.3.6.1.4.1.789.1.23.2.1.1. [0-9]\n";
	exit 0;
}

my $volOIDBase = "1.3.6.1.4.1.789.1.23.2.1";

# Needed as globals
my $snmpinfo;

sub do_collect {
    # Collect information from SNMP agent

    my $session = Munin::Plugin::SNMP->session();

    $snmpinfo = $session->get_hash(
	-baseoid => $volOIDBase,
	-cols    => {
	2       => 'sisPath',
        4       => 'sisStatus',
	});
}

sub do_config_root {
    my ($host) = @_;

    print "multigraph sis_status\n";
    print "graph_title $host SIS status\n";
    print "graph_args --base 1000 --lower-limit 0 --rigid\n";
    print "graph_vlabel sis status\n";
    print "graph_category sis\n";
    print "graph_info This graph shows the sis status for $host\n";


    foreach my $state ("sisInitialising", "sisRunning", "sisPending") {
    print "$state.label $state\n";
    print "$state.min 0\n";
    print "$state.draw AREASTACK\n";
    print "$state.type GAUGE\n";
    }
}


sub do_config_vol {
    my ($host,$version,$vol) = @_;

    my $alias;
    ($alias = $snmpinfo->{$vol}->{sisPath}) =~ s/(\/vol\/)(.*?)/$2/;

    my $extrainfo = '';

    print "multigraph sis_status.vol_$vol\n";

    print "graph_title sis status for volume $alias\n";
    print "graph_args --base 1000 --lower-limit 0 --rigid\n";
    print "graph_vlabel sis status\n";
    print "graph_category sis\n";
    print "graph_info This graph shows the sis status for the $alias volume.$extrainfo\n";
    print "graph_order sisInitialising sisRunning sisPending sisDebug\n";

    foreach my $state ("sisDebug", "sisInitialising", "sisRunning", "sisPending") {
    print "$state.info This is the $state status of $alias.\n";
    print "$state.label $state\n";
    print "$state.min 0\n";
    print "$state.draw AREASTACK\n";
    print "$state.type GAUGE\n";
    }
}


sub do_fetch_root {
    # Construct root graphs for the sis_status spaces

    my $sisSumIni = 0;
    my $sisSumRun = 0;
    my $sisSumPen = 0;

    foreach my $vol (keys %{$snmpinfo}) {
    my $status;
    $status = $snmpinfo->{$vol}->{sisStatus};

    switch ($status) {
        case 2 { $sisSumIni++ } #sis intialising
        case 3 { $sisSumRun++ } #sis runnung
        case 5 { $sisSumPen++ } #sis pending
      }
    }
    print "multigraph sis_status\n";
    print "sisInitialising.value $sisSumIni\n";
    print "sisRunning.value $sisSumRun\n";
    print "sisPending.value $sisSumPen\n";
}


sub do_fetch_vol {
    my($vol) = @_;

    my $status = $snmpinfo->{$vol}->{sisStatus};

    my $response = 0;
    my $sisIni = 0;
    my $sisRun = 0;
    my $sisPen = 0;

    switch ($status) {
	case 1 { $response = 0 } # sis idle
        case 2 { $sisIni = 1 } #sis intialising
	case 3 { $sisRun = 1 } #sis running
        case 5 { $sisPen = 1 } #sis pending
	else { $response = $status }
    }
	
    print "multigraph sis_status.vol_$vol\n";
    print "sisInitialising.value ", $sisIni, "\n";
    print "sisRunning.value ", $sisRun, "\n";
    print "sisPending.value ", $sisPen, "\n";
    print "sisDebug.value ", $response, "\n";
}


sub do_config {

    my ($host,undef,$version) = Munin::Plugin::SNMP->config_session();

    print "host_name $host\n" unless $host eq 'localhost';

    foreach my $vol (sort {$a <=> $b} keys %{$snmpinfo}) {
	do_config_vol($host,$version,$vol);
    }

    do_config_root($host);
}


sub do_fetch {

    foreach my $vol (sort {$a <=> $b} keys %{$snmpinfo}) {
	do_fetch_vol($vol);
    }

    do_fetch_root();
}

do_collect;

if ($ARGV[0] and $ARGV[0] eq "config") {
    do_config();
    exit 0;
}

do_fetch();

exit 0;
