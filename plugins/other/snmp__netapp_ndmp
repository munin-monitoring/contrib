#!/usr/bin/perl

use strict;
use warnings;
use Munin::Plugin::SNMP;
use vars qw($DEBUG);

$DEBUG = $ENV{'MUNIN_DEBUG'};

my %oids = (
	ndmpSessionOpened	=> 'SessionsOpened',
	ndmpBackupActive	=> 'BackupActive',
	ndmpRestoreActive	=> 'RestoreActive',

);

if (defined $ARGV[0] and $ARGV[0] eq 'snmpconf') {
    print "require 1.3.6.1.4.1.789.1.10.1.0 [0-9]\n";
    exit 0;
}

my $session = Munin::Plugin::SNMP->session();

if (defined $ARGV[0] and $ARGV[0] eq "config") {

    my ($host, undef, undef, undef) = Munin::Plugin::SNMP->config_session();

    print "host_name $host\n" unless $host eq 'localhost';
    print "graph_title $host NDMP \n";
    print "graph_args --base 1000 --lower-limit 0 --rigid\n";
    print "graph_vlabel NDMP status\n";
    print "graph_category NDMP\n";
    print "graph_info This graph shows NDMP status for the $host NetApp equipment.\n";
    print "graph_order ";

    foreach (sort keys %oids) { print "$_ "; }
    print "\n";

    foreach my $k (sort keys %oids) {
        print "$k.info The number of NDMP $oids{$k}\n";
        print "$k.label $oids{$k}\n";
        print "$k.min 0\n";
        print "$k.draw AREASTACK\n";
	print "$k.type GAUGE\n";
    }

    exit 0;
}

my $values = $session->get_hash(
    -baseoid => '1.3.6.1.4.1.789.1.10',
    -cols    => {
	2  => 'ndmpSessionOpened',
	3  => 'ndmpBackupActive',
	4  => 'ndmpRestoreActive',
    },
);

foreach my $k (keys %oids) {
    my $v = 'U';
    $v = $values->{0}->{$k} if (defined $values);
    print "$k.value $v\n";
}

exit 0;

__END__
