#!/usr/bin/perl -w
#
# Copyright (C) 2006 Lars Strand
#
# Munin plugin to monitor uptime by use of SNMP.
# Based on snmp__users plugin.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2 dated June,
# 1991.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
# $Log$
#
#%# family=snmpauto
#%# capabilities=snmpconf

use strict;
use Net::SNMP;

my $DEBUG = 0;

my $host      = $ENV{host}      || undef;
my $port      = $ENV{port}      || 161;
my $community = $ENV{community} || "public";

my $response;

if (defined $ARGV[0] and $ARGV[0] eq "snmpconf")
{
    print "require 1.3.6.1.2.1.1.3.0 \n";
    exit 0;
}

if ($0 =~ /^(?:|.*\/)snmp_([^_]+)_uptime$/)
{
    $host  = $1;
    if ($host =~ /^([^:]+):(\d+)$/)
    {
	$host = $1;
	$port = $2;
    }
}
elsif (!defined($host))
{
    print "# Debug: $0 -- $1\n" if $DEBUG;
    die "# Error: couldn't understand what I'm supposed to monitor.";
}

if (defined $ARGV[0] and $ARGV[0] eq "config")
{
    print "host_name $host\n";
    print "graph_title Uptime
graph_category system
graph_args --base 1000 -l 0 
graph_vlabel uptime
graph_info This graph shows the uptime (in days) of the system.
uptime.label uptime
uptime.draw AREA
";
    exit 0;
}

my ($session, $error) = Net::SNMP->session(
     -hostname  => $host,
     -community => $community,
     -port      => $port,
     -translate => ['-timeticks']
    );

if (!defined ($session))
{
    die "Croaking: $error";
}

printf "uptime.value %.2f\n",  &get_single($session, "1.3.6.1.2.1.1.3.0");

sub get_single
{
    my $handle = shift;
    my $oid    = shift;
    
    print "# Getting single $oid...\n" if $DEBUG;
    
    
    $response = $handle->get_request($oid);
    
    if (!defined $response->{$oid})
    {
	return undef;
    }
    else
    {
	return (($response->{$oid}/100)/(60*60*24));
    }
}
