#!/usr/bin/perl -w
#
# Copyright (C) 2008 J.M.Roth
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2 dated June,
# 1991.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#
# $Log$
#
# Inspired by snmp__processes
#
#%# family=snmpauto
#%# capabilities=snmpconf

use strict;
use Net::SNMP;

my $DEBUG = 0;

my $host      = $ENV{host}      || undef;
my $port      = $ENV{port}      || 161;
my $community = $ENV{community} || "public";
my $iface     = $ENV{interface} || undef;

my $response;

if (defined $ARGV[0] and $ARGV[0] eq "snmpconf")
{
	print "require 1.3.6.1.2.1.25.2.3.1.5.2\n"; # Number
	print "require 1.3.6.1.2.1.25.2.3.1.6.2\n"; # Number
	exit 0;
}

my @split_result = split(/_/, $0);
$host = $split_result[1];
if ($host =~ /^([^:]+):(\d+)$/)
{
    $host = $1;
    $port = $2;
}
if ($host eq '' || !defined $host)
{
	print "# Debug: $0 -- $1\n" if $DEBUG;
	die "# Error: couldn't understand what I'm supposed to monitor.";
}

my ($session, $error) = Net::SNMP->session(
		-hostname  => $host,
		-community => $community,
		-port      => $port
	);

if (!defined ($session))
{
	die "Croaking: $error";
}

if (defined $ARGV[0] and $ARGV[0] eq "config")
{
	print "host_name $host\n";
	print "graph_title Memory usage
graph_args --base 1000 -l 0 
graph_vlabel kB
graph_category system
graph_info This graph shows total and used memory on the host.
memsize.label total
memused.label used
memsize.info The total memory.
memused.info The memory in use.
memsize.draw LINE1
memused.draw LINE2
";

	exit 0;
}

print "memsize.value ", &get_single ($session, "1.3.6.1.2.1.25.2.3.1.5.2"), "\n";
print "memused.value ", &get_single ($session, "1.3.6.1.2.1.25.2.3.1.6.2"), "\n";

sub get_single
{
	my $handle = shift;
	my $oid    = shift;

	print "# Getting single $oid...\n" if $DEBUG;

	$response = $handle->get_request ($oid);

	if (!defined $response->{$oid})
	{
	    return undef;
	}
	else
	{
	    return $response->{$oid};
	}
}
