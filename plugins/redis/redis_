#!/usr/bin/perl -w

#
## Copyright (C) 2009 Gleb Voronich <http://stanly.net.ua/>
##
## This program is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation; version 2 dated June,
## 1991.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
##
##
## $Log$
##
## Based on Redis module code v0.08 2009/from http://svn.rot13.org/index.cgi/Redis
##
## Installation process:
##
## 1. Download the plugin to your plugins directory (e.g. /usr/share/munin/plugins)
## 2. Create 3 symlinks at the directory that us used by munin for plugins detection (e.g. /etc/munin/plugins): redis_connected_clients, redis_per_sec and and redis_used_memory
## 3. Edit plugin-conf.d/munin-node if it is needed (env.host and  env.port variables are accepted; set env.password for password protected Redis server)
## 4. Restart munin-node service
##
## Magic Markers
#%# family=auto
#%# capabilities=autoconf suggest

use strict;
use IO::Socket::INET;
use Switch;

my $HOST = exists $ENV{'host'} ? $ENV{'host'} : "127.0.0.1";
my $PORT = exists $ENV{'port'} ? $ENV{'port'} : 6379;
my $PASSWORD = exists $ENV{'password'} ? $ENV{'password'} : undef;

my $sock = &get_conn();
my $config = ( defined $ARGV[0] and $ARGV[0] eq "config" );
my $autoconf = ( defined $ARGV[0] and $ARGV[0] eq "autoconf" );
if ( $autoconf ) {
    if ( defined( $sock ) ) {
        print "yes\n";
        exit 0;
    } else {
        print "no (unable to connect to $HOST\[:$PORT\])\n";
        exit 0;
    }
}
my $suggest = ( defined $ARGV[0] and $ARGV[0] eq "suggest" );
if ( $suggest ) {
    if ( defined( $sock ) ) {
        my @plugins = ('connected_clients', 'key_ratio', 'keys_per_sec', 'per_sec', 'used_keys', 'used_memory');
        foreach my $plugin (@plugins) {
            print "$plugin\n";
        }
        exit 0;
    } else {
        print "no (unable to connect to $HOST\[:$PORT\])\n";
        exit 0;
    }
}

print $sock "INFO\r\n";
my $result = <$sock> || die "can't read socket: $!";

my $rep;
read($sock, $rep, substr($result,1)) || die "can't read from socket: $!";

my $hash;
foreach (split(/\r\n/, $rep)) {
    my ($key,$val) = split(/:/, $_, 2);
    if (defined($key)) {
        $hash->{$key} = $val;
    }
}
close ($sock);

$0 =~ s/(.+)redis_//g;

switch ($0) {
    case "connected_clients" {
        if ( $config ) {
            print "graph_title Connected clients\n";
            print "graph_vlabel Connected clients\n";
            print "graph_category redis\n";
            print "graph_args -l 0\n";
            print "connected_clients.label connected clients\n";
            exit 0;
        }

        print "connected_clients.value " . $hash->{'connected_clients'} . "\n";
    }


    case "keys_per_sec" {
        if ( $config ) {
            print "graph_title Keys Per Second\n";
            print "graph_vlabel per \${graph_period}\n";
            print "graph_category redis\n";
            print "graph_args -l 0\n";
            print "hits.label hits\n";
            print "hits.type COUNTER\n";
            print "misses.label misses\n";
            print "misses.type COUNTER\n";
            print "expired.label expirations\n";
            print "expired.type COUNTER\n";
            print "evictions.label evictions\n";
            print "evictions.type COUNTER\n";
            exit 0;
        }

        print "hits.value " . $hash->{'keyspace_hits'} . "\n";
        print "misses.value " . $hash->{'keyspace_misses'} . "\n";
        print "expired.value " . $hash->{'expired_keys'} . "\n";
        print "evictions.value " . $hash->{'evicted_keys'} . "\n";
    }

    case "key_ratio" {
        if ( $config ) {
            print "graph_title Key Hit vs Miss Ratio\n";
            print "graph_vlabel per \${graph_period}\n";
            print "graph_category redis\n";
            print "graph_args -u 100 -l 0 -r --base 1000\n";
            print "hitratio.label hit ratio\n";
            print "hitratio.type GAUGE\n";
            print "hitratio.draw AREA\n";
            print "missratio.label miss ratio\n";
            print "missratio.type GAUGE\n";
            print "missratio.draw STACK\n";
            exit 0;
        }
            
        my $total = $hash->{'keyspace_hits'} + $hash->{'keyspace_misses'};
        my $hitratio = 0;
        my $missratio = 0;
        if ($total > 0) {
            $hitratio = $hash->{'keyspace_hits'} / $total * 100;
            $missratio = $hash->{'keyspace_misses'} / $total * 100;
        }
        printf("hitratio.value %.2f\n", $hitratio);
        printf("missratio.value %.2f\n", $missratio);
    }


    case "per_sec" {
        if ( $config ) {
            print "graph_title Per second\n";
            print "graph_vlabel per \${graph_period}\n";
            print "graph_category redis\n";
            print "graph_args -l 0\n";
            print "requests.label requests\n";
            print "requests.type COUNTER\n";
            print "connections.label connections\n";
            print "connections.type COUNTER\n";
            exit 0;
        }

        print "requests.value ". $hash->{'total_commands_processed'} ."\n";
        print "connections.value ". $hash->{'total_connections_received'} ."\n";
    }


    case "used_memory" {
        if ( $config ) {
            print "graph_title Used memory\n";
            print "graph_vlabel Used memory\n";
            print "graph_category redis\n";
            print "graph_args -l 0 --base 1024\n";
            print "used_memory.label used memory\n";
            print "used_memory.draw AREA\n";
            exit 0;
        }

        print "used_memory.value ". $hash->{'used_memory'}  ."\n";
    }
    
    case "used_keys" {
        my $dbs;
        foreach my $key (keys %{$hash}) {
            if ( $key =~ /^db\d+$/ && $hash->{$key} =~ /keys=(\d+),expires=(\d+)/ ) {
                $dbs->{$key} = [ $1, $2 ];
            }
        }

        if ( $config ) {
            print "graph_title Used keys\n";
            print "graph_vlabel Used keys\n";
            print "graph_category redis\n";
            print "graph_args -l 0\n";

            foreach my $db (keys %{$dbs}) {
                printf "%s_keys.label %s keys\n", $db, $db;
                printf "%s_expires.label %s expires\n", $db, $db;
            }

            exit 0;
        }

        foreach my $db (keys %{$dbs}) {
            printf "%s_keys.value %d\n", $db, $dbs->{$db}[0];
            printf "%s_expires.value %d\n", $db, $dbs->{$db}[1];
        }
    }
}

sub get_conn {
    my $sock = IO::Socket::INET->new(
        PeerAddr => $HOST,
        PeerPort => $PORT,
        Timeout => 10,
        Proto => 'tcp'
    );
    if ( defined( $PASSWORD )  ) {
        print $sock "AUTH ", $PASSWORD, "\r\n";
        my $result = <$sock> || die "can't read socket: $!";
    }
    return $sock;
}

# vim: ft=perl ai ts=4 sw=4 et:
