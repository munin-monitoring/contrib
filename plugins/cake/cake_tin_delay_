#!/bin/bash
# -*- sh -*-

: << =cut

=pod

=encoding UTF-8

=head1 NAME

cake_tin_delay_ - Plugin to monitor cake's average tin delay 

=head1 CONFIGURATION

None needed.

=head1 INTERPRETATION

Cake, also known as sch_cake is a modern bandwidth limiter, which eliminates
buffer bloat over slow links. It's also capable to give flows, hosts and each 
flow of each host a fair part of the avaible bandwidth.

This plugin allows for a monitoring packet delays per tins on the qdisc.

=head1 SEE ALSO

Take a look at "man cake" to get more information about cake.

=head1 MAGIC MARKERS

 #%# family=auto
 #%# capabilities=autoconf suggest

=head1 AUTHORS

RubenKelevra <ruben@vfn-nrw.de>

work based on the tc plugin, authors:
Steve Schnepp <steve.schnepp@gmail.com>,
Samuel Smith <esaym@cpan.org>,
Nye Liu <nyet@nyet.org>

=head1 LICENSE

GPLv2 or later

=cut

DEVICE="${0##*/cake_tin_delay_}"

# green/blue -> red
eight_color=("006b5f" "1a9850" "66bd63" "a6d96a" "fdae61" "f46d43" "d73027" "9427d7")
four_color=("3288bd" "abdda4" "fdae61" "d53e4f")
three_color=("3288bd" "abdda4" "d53e4f")

tc_get_ifb_dev() {
	dev="$(/sbin/tc filter show dev "$DEVICE" parent ffff: protocol all | grep "mirred" | grep "Egress Redirect to device")"
	[ "$?" -eq "1" ] && return 1
	
	echo "$dev" | sed -n 's/.* device \([^ ]*\).*/\1/p' | tr ')' ' ' | awk '{ print $1 }'
}

tc_cake_get_diffserv() {
	/sbin/tc -s qdisc show dev "$1" | head -n1 | grep -i "diffserv3" > /dev/null
	if [ "$?" -eq "0" ]; then
		echo 3
	fi
	/sbin/tc -s qdisc show dev "$1" | head -n1 | grep -i "diffserv4" > /dev/null
	if [ "$?" -eq "0" ]; then
		echo 4
	fi
	/sbin/tc -s qdisc show dev "$1" | head -n1 | grep -i "diffserv8" > /dev/null
	if [ "$?" -eq "0" ]; then
		echo 8
	fi
	return 0
}

convert_time() {
	#converts us, ms, s into s without a unit
	echo "$1" | awk '{
		time = $1;
		sub(/[a-z]+$/, "", time);
		unit = $1;
		sub(/^[^a-z]+/, "", unit);

		if (unit == "ns") {
			time /= 1000000000;
		} else if (unit == "us") {
			time /= 1000000;
		} else if (unit == "ms") {
			time /= 1000;
		} else if (unit == "s") {
			time = time;
		} else if (unit == "m") {
			time *= 60;
		} else if (unit == "h") {
			time *= 3600;
		} else if (unit == "d") {
			time *= 86400;
		}
		printf("%.9f\n", time)
	}'
}

tc_cake_get_delays() {
	delays="$(/sbin/tc -s qdisc show dev "$1" | grep "^  av_delay" | sed -e 's/av_delay//')"
	for e in ${delays[@]}; do
		delay="$(convert_time "$e")"
		echo -en " $delay "
	done
	echo ""
}

DEVICE_IN="$(tc_get_ifb_dev)"
has_if_in=$?

diffserv_no="$(tc_cake_get_diffserv "$DEVICE")"
if [ "$has_if_in" -eq "0" ]; then
	diffserv_in_no="$(tc_cake_get_diffserv "$DEVICE_IN")"
	
	if [ ! "$diffserv_no" == "$diffserv_in_no" ]; then
		echo "cake_tin_delay_: diffserv setting different between egress and ingress device - this cannot be plotted, exiting" >&2
		exit 1
	fi
fi

case "$1" in
	autoconf)
	if [ -r /proc/net/dev ]; then
		echo yes
		exit 0
	else
		echo "no (/proc/net/dev not found)"
		exit 1
	fi
	;;
	suggest)
	if [ -r /proc/net/dev ]; then
		ifs="$(awk '
				/^ *(eth|tap|bond|wlan|ath|ra|sw|eno|ens|enp|wlp|wl)[0-9]*/ {
				   split($0, a, /: */);
				   gsub(/^ +/,"",a[1]);
				   if (($2 > 0) || ($10 > 0)) print a[1]; }' /proc/net/dev)"
		cake_ifs=()
		for if in $ifs; do
			qdisc="$(/sbin/tc -s qdisc show dev "$if" | head -n1 | awk '{ print $2 }')"
			if [ "$qdisc" == "cake" ]; then
				cake_ifs+=("$if")
			fi
		done
		echo "${cake_ifs[@]}"
	fi
	exit 0
	;;
	config)
	
	if [ "$has_if_in" -eq "0" ]; then
		echo "graph_title $DEVICE ($DEVICE_IN) cake QoS tin's avg delay"
	else
		echo "graph_title $DEVICE cake QoS tin's avg delay"
	fi
	echo 'graph_args --base 1000'
	if [ "$has_if_in" -eq "0" ]; then
		echo 'graph_vlabel seconds in (-) / out (+)'
	else
		echo 'graph_vlabel seconds'
	fi
	echo 'graph_category network'
	if [ "$has_if_in" -eq "0" ]; then
		echo "graph_info This graph shows the average latency of egress+ingress traffic per tin of the $DEVICE ($DEVICE_IN) network interface."
	else
		echo "graph_info This graph shows the average latency of egress traffic per tin of the $DEVICE network interface."
	fi
	
	if [ "$diffserv_no" == "3" ]; then

		if [ "$has_if_in" -eq "0" ]; then
			echo "bulk_in.label Bulk"
			echo "bulk_in.type GAUGE"
			echo "bulk_in.colour ${three_color[0]}"
			echo "bulk_in.min 0"
			echo "bulk_in.info avg delay for bulk packets thru cake"
			echo "bulk_in.graph no"
		fi
		echo "bulk.label Bulk"
		echo "bulk.type GAUGE"
		echo "bulk.colour ${three_color[0]}"
		echo "bulk.min 0"
		echo "bulk.info avg delay for bulk packets thru cake"
		[ "$has_if_in" -eq "0" ] && echo "bulk.negative bulk_in"
		
		if [ "$has_if_in" -eq "0" ]; then
			echo "besteffort_in.label Best Effort"
			echo "besteffort_in.type GAUGE"
			echo "besteffort_in.colour ${three_color[1]}"
			echo "besteffort_in.min 0"
			echo "besteffort_in.info avg delay for best effort packets thru cake"
			echo "besteffort_in.graph no"
		fi
		echo "besteffort.label Best Effort"
		echo "besteffort.type GAUGE"
		echo "besteffort.colour ${three_color[1]}"
		echo "besteffort.min 0"
		echo "besteffort.info avg delay for best effort packets thru cake"
		[ "$has_if_in" -eq "0" ] && echo "besteffort.negative besteffort_in"
		
		if [ "$has_if_in" -eq "0" ]; then
			echo "voice_in.label Voice"
			echo "voice_in.type GAUGE"
			echo "voice_in.colour ${three_color[2]}"
			echo "voice_in.min 0"
			echo "voice_in.info avg delay for Voice packets thru cake"
			echo "voice_in.graph no"
		fi
		echo "voice.label Voice"
		echo "voice.type GAUGE"
		echo "voice.colour ${three_color[2]}"
		echo "voice.min 0"
		echo "voice.info avg delay for Voice packets thru cake"
		[ "$has_if_in" -eq "0" ] && echo "voice.negative voice_in"
		
		exit 0
	fi
	
	if [ "$diffserv_no" == "4" ]; then

		if [ "$has_if_in" -eq "0" ]; then
			echo "bulk_in.label Bulk"
			echo "bulk_in.type GAUGE"
			echo "bulk_in.colour ${four_color[0]}"
			echo "bulk_in.min 0"
			echo "bulk_in.info avg delay for bulk packets thru cake"
			echo "bulk_in.graph no"
		fi
		echo "bulk.label Bulk"
		echo "bulk.type GAUGE"
		echo "bulk.colour ${four_color[0]}"
		echo "bulk.min 0"
		echo "bulk.info avg delay for bulk packets thru cake"
		[ "$has_if_in" -eq "0" ] && echo "bulk.negative bulk_in"
		
		if [ "$has_if_in" -eq "0" ]; then
			echo "besteffort_in.label Best Effort"
			echo "besteffort_in.type GAUGE"
			echo "besteffort_in.colour ${four_color[1]}"
			echo "besteffort_in.min 0"
			echo "besteffort_in.info avg delay for best effort packets thru cake"
			echo "besteffort_in.graph no"
		fi
		echo "besteffort.label Best Effort"
		echo "besteffort.type GAUGE"
		echo "besteffort.colour ${four_color[1]}"
		echo "besteffort.min 0"
		echo "besteffort.info avg delay for best effort packets thru cake"
		[ "$has_if_in" -eq "0" ] && echo "besteffort.negative besteffort_in"
		
		if [ "$has_if_in" -eq "0" ]; then
			echo "video_in.label Video"
			echo "video_in.type GAUGE"
			echo "video_in.colour ${four_color[2]}"
			echo "video_in.min 0"
			echo "video_in.info avg delay for Video packets thru cake"
			echo "video_in.graph no"
		fi
		echo "video.label Video"
		echo "video.type GAUGE"
		echo "video.colour ${four_color[2]}"
		echo "video.min 0"
		echo "video.info avg delay for Video packets thru cake"
		[ "$has_if_in" -eq "0" ] && echo "video.negative video_in"
		
		if [ "$has_if_in" -eq "0" ]; then
			echo "voice_in.label Voice"
			echo "voice_in.type GAUGE"
			echo "voice_in.colour ${four_color[3]}"
			echo "voice_in.min 0"
			echo "voice_in.info avg delay for Voice packets thru cake"
			echo "voice_in.graph no"
		fi
		echo "voice.label Voice"
		echo "voice.type GAUGE"
		echo "voice.colour ${four_color[3]}"
		echo "voice.min 0"
		echo "voice.info avg delay for Voice packets thru cake"
		[ "$has_if_in" -eq "0" ] && echo "voice.negative voice_in"
		
		exit 0
	fi
	
	if [ "$diffserv_no" == "8" ]; then
		
		if [ "$has_if_in" -eq "0" ]; then
			echo "tin1_in.label Tin 1"
			echo "tin1_in.type GAUGE"
			echo "tin1.colour ${eight_color[0]}"
			echo "tin1_in.min 0"
			echo "tin1_in.info avg delay for Tin 1 packets thru cake"
			echo "tin1_in.graph no"
		fi
		echo "tin1.label Tin 1"
		echo "tin1.type GAUGE"
		echo "tin1.colour ${eight_color[0]}"
		echo "tin1.min 0"
		echo "tin1.info avg delay for Tin 1 packets thru cake"
		[ "$has_if_in" -eq "0" ] && echo "tin1.negative tin1_in"
		
		for i in `seq 2 8`; do
			if [ "$has_if_in" -eq "0" ]; then
				echo "tin${i}_in.label Tin $i"
				echo "tin${i}_in.type GAUGE"
				echo "tin${i}_in.colour ${eight_color[$((i - 1))]}"
				echo "tin${i}_in.min 0"
				echo "tin${i}_in.info avg delay for Tin $i packets thru cake"
				echo "tin${i}_in.graph no"
			fi
			echo "tin${i}.label Tin $i"
			echo "tin${i}.type GAUGE"
			echo "tin${i}.colour ${eight_color[$((i - 1))]}"
			echo "tin${i}.min 0"
			echo "tin${i}.info avg delay for Tin $i packets thru cake"
			[ "$has_if_in" -eq "0" ] && echo "tin${i}.negative tin${i}_in"
		done
		
		exit 0  
	fi
	;;
esac

if [ "$diffserv_no" == "3" ]; then
	tc_cake_get_delays "$DEVICE" | awk '{
	print "bulk.value " $1
	print "besteffort.value " $2
	print "voice.value " $3
	}'
	if [ "$has_if_in" -eq "0" ]; then
		tc_cake_get_delays "$DEVICE_IN" | awk '{
		print "bulk_in.value " $1
		print "besteffort_in.value " $2
		print "voice_in.value " $3
		}'
	fi
	exit 0
fi
if [ "$diffserv_no" == "4" ]; then
	tc_cake_get_delays "$DEVICE" | awk '{
	print "bulk.value " $1
	print "besteffort.value " $2
	print "video.value " $3
	print "voice.value " $4
	}'
	if [ "$has_if_in" -eq "0" ]; then
		tc_cake_get_delays "$DEVICE_IN" | awk '{
		print "bulk_in.value " $1
		print "besteffort_in.value " $2
		print "video_in.value " $3
		print "voice_in.value " $4
		}'
	fi
	exit 0
fi
if [ "$diffserv_no" == "8" ]; then
	tc_cake_get_delays "$DEVICE" | awk '{
	print "tin1.value " $1
	print "tin2.value " $2
	print "tin3.value " $3
	print "tin4.value " $4
	print "tin5.value " $5
	print "tin6.value " $6
	print "tin7.value " $7
	print "tin8.value " $8
	}'
	if [ "$has_if_in" -eq "0" ]; then
		tc_cake_get_delays "$DEVICE_IN" | awk '{
		print "tin1_in.value " $1
		print "tin2_in.value " $2
		print "tin3_in.value " $3
		print "tin4_in.value " $4
		print "tin5_in.value " $5
		print "tin6_in.value " $6
		print "tin7_in.value " $7
		print "tin8_in.value " $8
		}'
	fi
	exit 0
fi


echo "cake_tin_delay_: no diffserv or unknown parameter set (best effort?)" >&2
exit 1
