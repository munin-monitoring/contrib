#!/bin/bash
#%# family=auto

: << EOF
=head1 NAME
gitea_commit_time_diff - Plugin to monitor the time since the last commit for a gitea repository.

=head1 CONFIGURATION

  [drone]
  env.url http://docker10.grote.lan:81/api/user/repos?latest=true
  env.token WXXXXXXXXXXXXXX



=head1 AUTHOR

Michael Grote (michael.grote@posteo.de)

=head1 MAGIC MARKERS

 #%# family=auto

 =head1 LICENSE

 GPLv3 or later

 SPDX-License-Identifier: GPL-3.0-or-later

=cut

EOF



if [ "$1" = "autoconf" ]; then
    if ! command -v jq &> /dev/null; then
        echo "no (jq could not be found)"
    elif ! command -v curl &> /dev/null; then
        echo "no (curl could not be found)"
    elif ! command -v sed &> /dev/null; then
        echo "no (sed could not be found)"
    elif ! command -v cut &> /dev/null; then
        echo "no (cut could not be found)"
    elif ! command -v tr &> /dev/null; then
        echo "no (tr could not be found)"
    else
        echo "yes"
    fi
    exit 0
fi

# get data
data=$(curl -X GET "$url" -H "Authorization: Bearer $token")



if [ "$1" = "config" ]; then
    # setze optionen
    echo "multigraph drone_build_status"
    echo "graph_title Drone CI/CD Build Status per Project"
    echo "graph_vlabel Errors"
    echo "graph_category devel"
    echo "graph_printf %6.0lf"
    echo "graph_args -l 0 --base 1000"
    echo "graph_info This graph displays the count of errors per project."

    echo $data | jq -r '.[] | select(.active == true) | "\(.slug) \(.build.status)"' | sed 's/[\/-]/_/g' | tr '[:upper:]' '[:lower:]' | awk '{ print $1 }' | while read line
    do
       echo $line.label $line
       echo $line.critical 1
    done

    exit 0
fi

echo "multigraph drone_build_status"
echo $data | jq -r '.[] | select(.active == true) | "\(.slug) \(.build.status)"' | sed 's/[\/-]/_/g' | tr '[:upper:]' '[:lower:]'| while read line
do
  # wenn $2 != success, dann gebe 1 zur√ºck
  echo $line | awk '{if ($2 == "success") { $2 = 0 } else { $2 = 1 }} { $1 = $1 ".value" } 1'
done
