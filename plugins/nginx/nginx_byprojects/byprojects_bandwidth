#!/usr/bin/perl -w
use strict;
#
# byprojects_bandwidth
#
# Perl script to monitor total bandwidth *byprojects* (e.g. vhost) from multiple files and/or regex.
#
# Danny Fullerton <northox@mantor.org> 
# Mantor Organization <www.mantor.org>
# This work is licensed under a Creative Commons Attribution 3.0 Unported License.
#
# You need logtail (https://www.fourmilab.ch/webtools/logtail/)
#
# Your nginx configuration should look like this (i.e. $request_length $body_bytes_sent at the end):
#   log_format main  '$remote_addr - $remote_user $time_local "$request" '
#                    '$status $body_bytes_sent "$http_referer" '
#                    '"$http_user_agent" $request_length $body_bytes_sent';
#
# Log can be gathered from multiple sources by simply specifying multiple log filename 
# and/or a log filename and a regex.
#   - 'prod' => [ {'path' => '/home/prod/log/access.log'} ],
#     Prod graph will be using everything in /home/prod/log/access.log
#   - 'test' => [ {'path' => '/var/log/access.log', 'regex' => '"[A-Z]+ /test/'},
#                 {'path' => '/home/test/log/access.log'} ],
#     Test graph will be using everything in /home/test/log/access.log and stuff that match 
#     '"[A-Z] /test/' in /var/log/access.log such as '"GET /test/'

my $server = 'Nginx';

my $statepath = '/usr/local/var/munin/plugin-state'; # where logtail will save the state
my $logtail = '/usr/local/bin/logtail';

my %logs = (
    'prod' => [
                {'path' => '/home/prod/log/access.log'}
              ],
    'dev'  => [
                {'path' => '/var/log/httpd/ssl-dev-access.log'},
                {'path' => '/home/dev/log/access.log'}
              ],
    'test' => [
                {'path' => '/var/log/access.log', 'regex' => '"[A-Z]+ /test/'},
                {'path' => '/home/test/log/access.log'}
              ],
);


###########

if(defined($ARGV[0])) {
  if ($ARGV[0] eq 'autoconf') {
    print "yes\n";
    exit(0);
  } elsif ($ARGV[0] eq 'config') {
    my $order = '';
    while ((my $project, my @files) = each(%logs)) { $order .= $project.' ' }
    print "graph_order $order\n";
    print "graph_title $server total bandwidth byprojects\n";
    print "graph_total Total\n";
    print "graph_vlabel Bits\n";
    print "graph_category $server\n";
    print "graph_info This graph show $server total bandwidth used by various projects.\n";
    while ((my $project, my @files) = each(%logs)) {
      print $project.".label $project\n";
      print $project.".type GAUGE\n";
    }
    exit(0);
  }
}

foreach my $project ( keys %logs )  {
  my $i = 0;
  my $o = 0;
  my $x = 0;
  foreach my $log ( @{$logs{$project}} ) {
    my $state = $statepath.'/'.$project.$x.'_totalbandwidth.state';
    open(LT, "$logtail -f ".$log->{'path'}." -o $state |") or die "Can't open $logtail : $!";
    while (<LT>) {
      my $buf = $_;
      if($buf eq '') { next }
      if(!defined($log->{'regex'}) || $buf =~ m/$log->{'regex'}/) {
        if($buf =~ m/(\d+) (\d+)$/) {
          $i += $1;
          $o += $2;
        }
      }
    }
    close(LT);
    $x++;
  }
  $x = $i + $o;
  print $project.".value $x\n";
}
