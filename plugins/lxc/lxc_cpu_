#!/bin/bash
# -*- sh -*-

: << =cut

=head1 NAME

lxc_cpu - Plugin to monitor LXC CPU usage

=head1 CONFIGURATION

This is a wildcard plugin. To monitor CPU usage for a LXC container, link
lxc_cpu_<container> to this file. For example,

  ln -s /usr/share/munin/plugins/lxc_cpu_ \
        /etc/munin/plugins/lxc_cpu_mycontainer

will monitor the container "mycontainer".


This plugin needs root privilege, you need to use the following
configuration:

  [lxc_*]
    user root

Default configuration:

  [lxc_cpu_*]
    env.HZ  100

See the documentation of the official "cpu" plugin for an explanation of
this setting.

=head1 AUTHOR

vajtsz  vajtsz@gmail.com
mitty   mitty@mitty.jp
Baptiste Jonglez

=head1 LICENSE

Unknown license

=head1 MAGIC MARKERS

 #%# family=auto
 #%# capabilities=autoconf suggest

=cut

. $MUNIN_LIBDIR/plugins/plugin.sh

CONTAINER="${0##*lxc_cpu_}"
HZ=${HZ:-100}

f_comm='lxc-cgroup  '

case $1 in
    autoconf)
	if [ -r /proc/stat ]; then
		echo yes
		exit 0
	else
		echo "no (no /proc/stat)"
		exit 0
	fi
        ;;
    suggest)
        lxc-ls -1
        exit 0
        ;;
    config)
        echo "graph_title CPU usage for LXC container $CONTAINER "
        # Set default graph upper limit to 100 (i.e. 1 CPU fully used), so
        # that containers with low CPU usage have a sensible scale.
        # Of course a container may use several CPU cores, in which case
        # the graph will have a scale higher than 100.
        # TODO: it could be interesting to figure out how many CPU cores a
        # container is allowed to use, and set this value as upper limit.
        echo 'graph_args -l 0 -u 100 --base 1000'
        echo 'graph_vlabel %'
        echo 'graph_category virtualization'
        echo 'graph_order cpu_system cpu_user'
        echo 'cpu_user.label user'
        echo 'cpu_user.type DERIVE'
        echo 'cpu_user.draw AREASTACK'
        echo 'cpu_user.min 0'
        echo 'cpu_system.label system'
        echo 'cpu_system.type DERIVE'
        echo 'cpu_system.draw AREASTACK'
        echo 'cpu_system.min 0'
        exit 0
        ;;
esac

# Use a single awk call to display both user and system values, and print
# "U" in case the container is not running.  Inspired from the official
# "cpu" plugin and https://stackoverflow.com/questions/11222190/print-specified-text-if-string-is-empty-using-awk#11222496
$f_comm -n $CONTAINER cpuacct.stat 2> /dev/null | awk -v hz=$HZ '/^user / { printf "cpu_user.value %.0f\n", $2*100/hz; } /^system / { printf "cpu_system.value %.0f\n", $2*100/hz; } END { if (!NR) printf "cpu_user.value U\ncpu_system.value U\n"; }'
