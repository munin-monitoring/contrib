#!/bin/bash
# -*- bash -*-

: << =cut

=head1 NAME

haproxy_errors_backend -Haproxy Errors Backend

=head1 CONFIGURATION

[haproxy*]
  user root
  env.backend backend_name_1 backend_name_2 backend_name_3
  env.frontend frontend_name_1 frontend_name_2 frontend_name_3
  # You can use url o socket option, use one of them, not both!
    env.url  http://user:passwd@IP:port/admin?stats;csv
  #  or
    env.socket /var/lib/haproxy/stats.socket

=head1 AUTHOR

Ricardo Fraile <rfrail3@yahoo.es>

=head1 LICENSE

GPLv2

=head1 MAGICK MARKERS

 #%# family=auto
 #%# capabilities=autoconf

=cut

. $MUNIN_LIBDIR/plugins/plugin.sh

function parse_url {
        # Modify ifs variable
        OIFS=$IFS;
        IFS=",";
        PXNAME="$1"
        SVNAME="$2"
        VALUE="$3"
        
        if [ ! -z "$url" ]; then
                LINE1=`curl -s "$url" | head -1 | sed 's/# //'`
                LINE2=`curl -s "$url" | grep "$PXNAME,$SVNAME"`
        fi

        if [ ! -z "$socket" ]; then
                LINE1=`echo 'show stat' | socat unix-connect:"$socket" stdio | head -1 | sed 's/# //'`
                LINE2=`echo 'show stat' | socat unix-connect:"$socket" stdio | grep "$PXNAME,$SVNAME"`
        fi
        
        ARRAY1=($LINE1);

        # Find values
        for ((i=0; i<${#ARRAY1[@]}; ++i));
        do
                # Get data
                if [[ "${ARRAY1[$i]}" == "${VALUE}" ]]; then
                        o=$i;
                        o=`expr $o + 1`
                        echo ${LINE2} | cut -d" " -f $o
                fi
        done

        # Reset ifs
        IFS=$OIFS;
}


SVNAME='BACKEND'
LIST="$backend"


if [ "$1" = "autoconf" ]; then
	echo yes 
	exit 0
fi

if [ "$1" = "config" ]; then

	echo "graph_title Errors ${SVNAME}"
	echo 'graph_args --base 1000 -l 0 '
	echo 'graph_vlabel Errors'
	echo 'graph_scale no'
	echo 'graph_category loadbalancer'
	echo "graph_info Errors ${SVNAME}"


	for i in ${LIST}; do
	        #echo "ereq`echo $i | md5sum | cut -d - -f1 | sed 's/ //g'`.label Request Errors $i"
        	#echo "ereq`echo $i | md5sum | cut -d - -f1 | sed 's/ //g'`.type DERIVE"
	        #echo "ereq`echo $i | md5sum | cut -d - -f1 | sed 's/ //g'`.min 0"
        	#echo "ereq`echo $i | md5sum | cut -d - -f1 | sed 's/ //g'`.info Request Errors $i"

	        echo "econ`echo $i | md5sum | cut -d - -f1 | sed 's/ //g'`.label Connection Errors $i"
        	echo "econ`echo $i | md5sum | cut -d - -f1 | sed 's/ //g'`.type DERIVE"
	        echo "econ`echo $i | md5sum | cut -d - -f1 | sed 's/ //g'`.min 0"
        	echo "econ`echo $i | md5sum | cut -d - -f1 | sed 's/ //g'`.info Connection Errors $i"

	        echo "eresp`echo $i | md5sum | cut -d - -f1 | sed 's/ //g'`.label Response Errors $i"
        	echo "eresp`echo $i | md5sum | cut -d - -f1 | sed 's/ //g'`.type DERIVE"
	        echo "eresp`echo $i | md5sum | cut -d - -f1 | sed 's/ //g'`.min 0"
        	echo "eresp`echo $i | md5sum | cut -d - -f1 | sed 's/ //g'`.info Response Errors $i"

	done

	exit 0
fi
	for i in ${LIST}; do
		#EREQ=`parse_url ${i} ${SVNAME} ereq`
		ECON=`parse_url ${i} ${SVNAME} econ`
		ERESP=`parse_url ${i} ${SVNAME} eresp`

	        #echo "ereq`echo $i | md5sum | cut -d - -f1 | sed 's/ //g'`.value $EREQ"
	        echo "econ`echo $i | md5sum | cut -d - -f1 | sed 's/ //g'`.value $ECON"
	        echo "eresp`echo $i | md5sum | cut -d - -f1 | sed 's/ //g'`.value $ERESP"
	done
	

