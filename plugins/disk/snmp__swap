#!/usr/bin/perl -w
#
# Copyright (C) 2006 Lars Strand
#
# Munin plugin to monitor swap usage by use of SNMP.
# Based on the snmp__df plugin
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2 dated June,
# 1991.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
# $Log$
#
#%# family=snmpauto
#%# capabilities=snmpconf

use strict;
use Net::SNMP;

my $DEBUG = 0;
my $MAXLABEL = 20;

my $host      = $ENV{host}      || undef;
my $port      = $ENV{port}      || 161;
my $community = $ENV{community} || "public";
my $iface     = $ENV{interface} || undef;

my $response;

if (defined $ARGV[0] and $ARGV[0] eq "snmpconf")
{
    # HOST-RESOURCES-MIB::hrStorage
    # HOST-RESOURCES-TYPES::hrStorageVirtualMemory
    print "require 1.3.6.1.2.1.25.2. 1.3.6.1.2.1.25.2.1.3\n"; 
    exit 0;
}

if ($0 =~ /^(?:|.*\/)snmp_([^_]+)_swap$/)
{
    $host  = $1;
    if ($host =~ /^([^:]+):(\d+)$/)
    {
	$host = $1;
	$port = $2;
    }
}
elsif (!defined($host))
{
    print "# Debug: $0 -- $1\n" if $DEBUG;
    die "# Error: couldn't understand what I'm supposed to monitor.";
}

my ($session, $error) = Net::SNMP->session(
     -hostname  => $host,
     -community => $community,
     -port      => $port
    );

if (!defined ($session))
{
    die "Croaking: $error";
}

my $hrStorage = "1.3.6.1.2.1.25.2.";
my $hrStorageVirtualMemory = "1.3.6.1.2.1.25.2.1.3";
my $hrStorageSize = "1.3.6.1.2.1.25.2.3.1.5.";
my $hrStorageUsed = "1.3.6.1.2.1.25.2.3.1.6.";

my $swap_d = get_by_regex($session, $hrStorage, $hrStorageVirtualMemory);

my $swapsize = 0; my $swapused = 0;

foreach my $swap (keys %$swap_d) 
{
    $swapsize += get_single($session, $hrStorageSize . $swap);
    $swapused += get_single($session, $hrStorageUsed . $swap);
}

if (defined $ARGV[0] and $ARGV[0] eq "config")
{
    print "host_name $host\n";
    print "graph_title Virtual memory usage\n";
    if ($swapsize > 0) 
    {
	print "graph_args -l 0 --base 1000 --upper-limit $swapsize\n";
    } 
    else 
    {
	print "graph_args -l 0 --base 1000\n";
    }
    print "graph_vlabel Bytes\n";
    print "graph_category disk\n";
    print "graph_info This graph shows swap usage in bytes.\n";
    print "swap.label swap\n";
    print "swap.type DERIVE\n";
    print "swap.min 0\n";
    exit 0;
}

print "swap.value $swapused\n";

sub get_single
{
    my $handle = shift;
    my $oid    = shift;
    
    print "# Getting single $oid..." if $DEBUG;
    
    $response = $handle->get_request ($oid);
    
    if (!defined $response->{$oid})
    {
	print "undef\n" if $DEBUG;
	return undef;
    }
    else
    {
	print "\"$response->{$oid}\"\n" if $DEBUG;
	return $response->{$oid};
    }
}

sub get_by_regex
{
    my $handle = shift;
    my $oid    = shift;
    my $regex  = shift;
    my $result = {};
    my $num    = 0;
    my $ret    = $oid . "0";
    my $response;
    
    print "# Starting browse of $oid...\n" if $DEBUG;
    
    while (1)
    {
	if ($num == 0)
	{
	    print "# Checking for $ret...\n" if $DEBUG;
	    $response = $handle->get_request ($ret);
	}
	if ($num or !defined $response)
	{
	    print "# Checking for sibling of $ret...\n" if $DEBUG;
	    $response = $handle->get_next_request ($ret);
	}
	if (!$response)
	{
	    return undef;
	}
	my @keys = keys %$response;
	$ret = $keys[0];
	print "# Analyzing $ret (compared to $oid)...\n" if $DEBUG;
	last unless ($ret =~ /^$oid/);
	$num++;
	next unless ($response->{$ret} =~ /$regex/);
	@keys = split (/\./, $ret);
	$result->{$keys[-1]} = $response->{$ret};;
	print "# Index $num: ", $keys[-1], " (", $response->{$ret}, ")\n" if $DEBUG;
    };
    return $result;
}
